/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.vufrm;

/**
 *
 * @author Mukisa
 */
// java.sql package - Database operations
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

// javax.swing package - GUI components
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

// javax.swing.table package - Table components
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

// javax.swing package - Filters
import javax.swing.RowFilter;

// java.awt package - Graphics and images
import java.awt.*;
import java.awt.Image;

// java.io package - File operations
import java.io.File;

public class RegistrationForm extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(RegistrationForm.class.getName());

    /**
     * Creates new form RegistrationForm
     */
    
    public RegistrationForm() {
        initComponents();
        loadDataToTable();
        setupTableSelectionListener();
        generateVUAutoIncrementedId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRegId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDancingPartner = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        panelImage = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnUploadImage = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        comboDepartment = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("SALSA Festival Registration System");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Registration ID:");

        txtRegId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Participant Name:");

        txtName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("University Dept:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Dancing Partner:");

        txtDancingPartner.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Contact Number:");

        txtContact.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Email Address:");

        panelImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelImage.setLayout(new java.awt.BorderLayout());

        jButton1.setBackground(new java.awt.Color(0, 204, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Save");
        jButton1.setToolTipText("Click this button save all the data from the above fields");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 204, 51));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setToolTipText("Click this button to update the data");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setToolTipText("Click this button to Refresh all the fields");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnUploadImage.setBackground(new java.awt.Color(196, 85, 10));
        btnUploadImage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnUploadImage.setForeground(new java.awt.Color(255, 255, 255));
        btnUploadImage.setText("Import Image");
        btnUploadImage.setToolTipText("Click this button to import only image files");
        btnUploadImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Reg_ID", "Name", "Department", "Partner", "Contacts", "Email", "Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        comboDepartment.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Department", "Computer Science", "Information Technology", "Software Engineering Data Science", "Cybersecurity", "Electrical Engineering", "Mechanical Engineering", "Civil Engineering" }));

        btnSearch.setBackground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setToolTipText("First insert the Registration ID \nbefore you click this button");
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel8.setText("MUKISA MARK EMMANUEL - VU-BIT-2507-3059-DAY");

        jLabel10.setText("FILBANA BOL CHOL- VU-BCS-2411-0965-DAY");

        jLabel11.setText("PRISCA WATANGWA   - VU-BCS-2411-0236-DAY");

        jLabel12.setText("ODONG BENJAMIN   - VU-BSF-2411-0862-DAY");

        jLabel13.setText("EUPA EMMANUEL   - VU-BCS-2411-1498-DAY");

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Click this button to update the data");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtRegId, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDancingPartner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(159, 159, 159)
                                        .addComponent(btnUploadImage)
                                        .addGap(32, 32, 32)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(126, 126, 126))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(comboDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel12))
                                        .addGap(10, 10, 10))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(262, 262, 262)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUploadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(panelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtRegId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(comboDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtDancingPartner, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(95, 95, 95))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addContainerGap(17, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addGap(39, 39, 39))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        btnDelete.getAccessibleContext().setAccessibleName("Delete");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearImagePanel() {
    try {
        // Remove all components from the panel
        panelImage.removeAll();
        
        // Create and add a placeholder label
        JLabel placeholderLabel = new JLabel(
            "<html><center>No image selected<br/><font size='-2' color='gray'>Click 'Upload Image' to add a photo</font></center></html>", 
            SwingConstants.CENTER
        );
        placeholderLabel.setForeground(Color.GRAY);
        placeholderLabel.setFont(new Font("Arial", Font.PLAIN, 12));
        
        // Add the placeholder to the panel
        panelImage.add(placeholderLabel, BorderLayout.CENTER);
        
        // Refresh the panel to show changes
        panelImage.revalidate();
        panelImage.repaint();
        
        // Clear the current image path
        currentImagePath = null;
        
        System.out.println("Image panel cleared successfully.");
        
    } catch (Exception e) {
        System.out.println("Error clearing image panel: " + e.getMessage());
        e.printStackTrace();
    }
}
    private void clearForm() {
    // Clear all text fields
    txtRegId.setText("");
    txtName.setText("");
    txtDancingPartner.setText("");
    txtContact.setText("");
    txtEmail.setText("");
    clearImagePanel();
    // Reset combo box to default selection
    comboDepartment.setSelectedIndex(0); // "Select Department"
    loadDataToTable();
    
    // Clear image
  //  lblImage.setIcon(null);
   // lblImage.setText("No image selected");
   // currentImagePath = null; // Reset image path variable
    
    // Clear any table selection
   // if (tblParticipants.getSelectedRow() != -1) {
     //   tblParticipants.clearSelection();
  //  }
    
    // Set focus back to first field
    txtRegId.requestFocus();
    refreshDataTable();
    generateVUAutoIncrementedId();
}
    /**
 * Generates a VU-auto-incremented registration ID in the format: VU-REG-XXXX
 * where XXXX is an auto-incremented number based on existing records
 */
private void generateVUAutoIncrementedId() {
    try {
        Connection con = DatabaseConnection.getConnection();
        
        // Query to get the maximum existing registration ID with VU-REG prefix
        String sql = "SELECT MAX(RegistrationID) FROM Participants WHERE RegistrationID LIKE 'VU-REG-%'";
        
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        
        int nextNumber = 1; // Default starting number
        
        if (rs.next()) {
            String maxId = rs.getString(1);
            
            if (maxId != null && maxId.startsWith("VU-REG-")) {
                try {
                    // Extract the numeric part from "VU-REG-XXXX"
                    String numberPart = maxId.substring(7); // Remove "VU-REG-"
                    nextNumber = Integer.parseInt(numberPart) + 1;
                } catch (NumberFormatException e) {
                    System.out.println("Error parsing existing ID, starting from 1");
                    nextNumber = 1;
                }
            }
        }
        
        // Format the new ID with leading zeros (4 digits)
        String newId = String.format("VU-REG-%04d", nextNumber);
        
        // Set the generated ID in the text field
        txtRegId.setText(newId);
        
        // Close resources
        rs.close();
        pst.close();
        
        System.out.println("Generated new Registration ID: " + newId);
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error generating Registration ID: " + e.getMessage(), 
            "ID Generation Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        
        // Fallback: Set a default ID
        txtRegId.setText("VU-REG-0001");
    }
}
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       clearForm(); // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed
private void loadImageToPanel(String imagePath) {
    try {
        // Remove any existing components from panel
        panelImage.removeAll();
        
        // Load the original image
        ImageIcon originalIcon = new ImageIcon(imagePath);
        Image originalImage = originalIcon.getImage();
        
        // Get panel dimensions
        int panelWidth = panelImage.getWidth();
        int panelHeight = panelImage.getHeight();
        
        // Calculate scaled dimensions maintaining aspect ratio
        int scaledWidth, scaledHeight;
        double aspectRatio = (double) originalIcon.getIconWidth() / originalIcon.getIconHeight();
        
        if (panelWidth / aspectRatio <= panelHeight) {
            scaledWidth = panelWidth - 10; // Padding
            scaledHeight = (int) (scaledWidth / aspectRatio);
        } else {
            scaledHeight = panelHeight - 10; // Padding
            scaledWidth = (int) (scaledHeight * aspectRatio);
        }
        
        // Scale image smoothly
        Image scaledImage = originalImage.getScaledInstance(
            scaledWidth, 
            scaledHeight, 
            Image.SCALE_SMOOTH
        );
        
        // Create label with scaled image
        JLabel imageLabel = new JLabel(new ImageIcon(scaledImage));
        imageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        imageLabel.setVerticalAlignment(SwingConstants.CENTER);
        
        // Add image label to panel
        panelImage.add(imageLabel, BorderLayout.CENTER);
        panelImage.revalidate();
        panelImage.repaint();
        
        // Store the current image path
        currentImagePath = imagePath;
        
    } catch (Exception e) {
        showErrorInPanel();
        JOptionPane.showMessageDialog(this, 
            "Error loading image:\n" + e.getMessage(), 
            "Image Error", 
            JOptionPane.ERROR_MESSAGE);
    }
}

private String currentImagePath = null;
private void showErrorInPanel() {
    panelImage.removeAll();
    JLabel errorLabel = new JLabel("<html><center>Invalid Image<br/><font size='-2'>Please select a valid image file</font></center></html>", SwingConstants.CENTER);
    errorLabel.setForeground(Color.RED);
    errorLabel.setFont(new Font("Arial", Font.PLAIN, 12));
    panelImage.add(errorLabel, BorderLayout.CENTER);
    panelImage.revalidate();
    panelImage.repaint();
    currentImagePath = null;
}


    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
JFileChooser fileChooser = new JFileChooser();
    
    // Set default directory (optional)
    fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Pictures"));
    
    // Set file filter for images only
    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
        "Image files (*.jpg, *.jpeg, *.png, *.gif, *.bmp)", 
        "jpg", "jpeg", "png", "gif", "bmp"
    ));
    
    // Set dialog title
    fileChooser.setDialogTitle("Select University ID Image");
    
    // Show open dialog
    int result = fileChooser.showOpenDialog(this);
    
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String imagePath = selectedFile.getAbsolutePath();
        
        // Load and display the image
        loadImageToPanel(imagePath);
        
        // Update status
    //    txtStatus.setText("Image loaded: " + selectedFile.getName());
        
        JOptionPane.showMessageDialog(this, 
            "Image uploaded successfully!\n" + selectedFile.getName(), 
            "Success", 
            JOptionPane.INFORMATION_MESSAGE);
    } else {
       // txtStatus.setText("Image selection cancelled.");
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnUploadImageActionPerformed
// Method to validate all user input fields
private boolean validateInput() {
    // ==============================
    // 1️⃣ Check for empty Registration ID
    // ==============================
    if (txtRegId.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Registration ID cannot be empty!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        txtRegId.requestFocus();
        return false;
    }
    
    // ==============================
    // 2️⃣ Check for empty Participant Name
    // ==============================
    if (txtName.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Participant Name cannot be empty!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        txtName.requestFocus();
        return false;
    }
    
    // ==============================
    // 3️⃣ Check if a Department is selected
    // ==============================
    if (comboDepartment.getSelectedIndex() == 0) {
        JOptionPane.showMessageDialog(this, "Please select a department!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        comboDepartment.requestFocus();
        return false;
    }
    
    // ==============================
    // 4️⃣ Check for empty Contact Number
    // ==============================
    if (txtContact.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Contact Number cannot be empty!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        txtContact.requestFocus();
        return false;
    }

    // ==============================
    // 5️⃣ Validate Contact Number format
    // ==============================
    String contact = txtContact.getText().trim();
    
    // Pattern 1: Digits only (10 digits, e.g., "0789123456")
    // Pattern 2: Starts with +256 (Uganda format, e.g., "+256789123456")
    if (!contact.matches("\\d{10}") && !contact.matches("\\+256\\d{9}")) {
        JOptionPane.showMessageDialog(this,
                "Please enter a valid phone number!\nExamples: 0789123456 or +256789123456",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
        txtContact.requestFocus();
        return false;
    }

    // ==============================
    // 6️⃣ Check for empty Email
    // ==============================
    if (txtEmail.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Email cannot be empty!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        txtEmail.requestFocus();
        return false;
    }
    
    // ==============================
    // 7️⃣ Validate Email format
    // ==============================
    String email = txtEmail.getText().trim();
    // Simple regex for email validation
    if (!email.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid email address!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        txtEmail.requestFocus();
        return false;
    }
    
    // ==============================
    // ✅ All validations passed
    // ==============================
    return true;
}

private void registerParticipant() {
    try {
        // Validate input first
        if (!validateInput()) {
            return; // Stop if validation fails
        }
        
        // Check if registration ID already exists
        if (checkDuplicateId(txtRegId.getText().trim())) {
            JOptionPane.showMessageDialog(this, 
                "Registration ID already exists!\nPlease use a different ID.", 
                "Duplicate ID", 
                JOptionPane.WARNING_MESSAGE);
            txtRegId.requestFocus();
            return;
        }
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "INSERT INTO Participants (RegistrationID, ParticipantName, UniversityDepartment, DancingPartner, ContactNumber, EmailAddress, ImagePath) VALUES (?, ?, ?, ?, ?, ?, ?)";
        
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, txtRegId.getText().trim());
        pst.setString(2, txtName.getText().trim());
        pst.setString(3, comboDepartment.getSelectedItem().toString());
        pst.setString(4, txtDancingPartner.getText().trim());
        pst.setString(5, txtContact.getText().trim());
        pst.setString(6, txtEmail.getText().trim());
        
        // Handle image path - use empty string if no image
        String imagePath = (currentImagePath != null) ? currentImagePath : "";
        pst.setString(7, imagePath);
        
        int rows = pst.executeUpdate();
        
        if (rows > 0) {
            JOptionPane.showMessageDialog(this, 
                "Participant registered successfully!\nRegistration ID: " + txtRegId.getText(), 
                "Success", 
                JOptionPane.INFORMATION_MESSAGE);
            
            // Clear form and refresh table
            clearForm();
           // refreshTable(); // We'll create this method next
            
           // txtStatus.setText("Participant registered successfully.");
        } else {
            JOptionPane.showMessageDialog(this, 
                "Failed to register participant!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
        
        pst.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error registering participant: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

private boolean checkDuplicateId(String regId) {
    try {
        Connection con = DatabaseConnection.getConnection();
        String sql = "SELECT RegistrationID FROM Participants WHERE RegistrationID = ?";
        
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, regId);
        
        ResultSet rs = pst.executeQuery();
        boolean exists = rs.next(); // Returns true if record exists
        
        rs.close();
        pst.close();
        
        return exists;
        
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        registerParticipant();// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
private void updateParticipant() {
    try {
        // Validate input first
        if (!validateInput()) {
            return;
        }
        
        // Check if a record is selected (from table or has Reg ID)
        if (txtRegId.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please select a participant to update!\nEither click on a row in the table or enter Registration ID.", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Confirm update
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to update participant: " + txtRegId.getText() + "?",
            "Confirm Update",
            JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "UPDATE Participants SET ParticipantName = ?, UniversityDepartment = ?, DancingPartner = ?, ContactNumber = ?, EmailAddress = ?, ImagePath = ? WHERE RegistrationID = ?";
        
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, txtName.getText().trim());
        pst.setString(2, comboDepartment.getSelectedItem().toString());
        pst.setString(3, txtDancingPartner.getText().trim());
        pst.setString(4, txtContact.getText().trim());
        pst.setString(5, txtEmail.getText().trim());
        
        // Handle image path
        String imagePath = (currentImagePath != null) ? currentImagePath : "";
        pst.setString(6, imagePath);
        pst.setString(7, txtRegId.getText().trim());
        
        int rows = pst.executeUpdate();
        
        if (rows > 0) {
            JOptionPane.showMessageDialog(this, 
                "Participant updated successfully!\nRegistration ID: " + txtRegId.getText(), 
                "Update Success", 
                JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh the table to show updated data
            loadDataToTable();
          //  txtStatus.setText("Participant updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, 
                "No participant found with Registration ID: " + txtRegId.getText() + "\nPlease check the ID and try again.", 
                "Update Failed", 
                JOptionPane.WARNING_MESSAGE);
        }
        
        pst.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error updating participant: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       updateParticipant(); // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed
private void deleteParticipant() {
    try {
        // Check if a record is selected
        if (txtRegId.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please select a participant to delete!\nEither click on a row in the table or enter Registration ID.", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String regId = txtRegId.getText().trim();
        String participantName = txtName.getText().trim();
        
        // Confirm deletion with warning
        int confirm = JOptionPane.showConfirmDialog(this,
            "<html><b>Are you sure you want to delete this participant?</b><br><br>" +
            "Registration ID: <b>" + regId + "</b><br>" +
            "Name: <b>" + participantName + "</b><br><br>" +
            "This action cannot be undone!",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "DELETE FROM Participants WHERE RegistrationID = ?";
        
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, regId);
        
        int rows = pst.executeUpdate();
        
        if (rows > 0) {
            JOptionPane.showMessageDialog(this, 
                "Participant deleted successfully!\n\n" +
                "Registration ID: " + regId + "\n" +
                "Name: " + participantName, 
                "Deletion Success", 
                JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh the table and clear form
            loadDataToTable();
            clearForm();
           // txtStatus.setText("Participant deleted: " + regId);
        } else {
            JOptionPane.showMessageDialog(this, 
                "No participant found with Registration ID: " + regId + "\nPlease check the ID and try again.", 
                "Deletion Failed", 
                JOptionPane.WARNING_MESSAGE);
        }
        
        pst.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error deleting participant: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}private void highlightRowInTable(String regId) {
    try {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        // Search for the row with matching registration ID
        for (int i = 0; i < model.getRowCount(); i++) {
            Object rowId = model.getValueAt(i, 0); // Column 0 is Reg ID
            if (rowId != null && rowId.toString().equals(regId)) {
                // Select the row
                jTable1.setRowSelectionInterval(i, i);
                
                // Scroll to make the row visible
                jTable1.scrollRectToVisible(jTable1.getCellRect(i, 0, true));
                
                // Optional: Set focus to table
                jTable1.requestFocus();
                
                System.out.println("Highlighted row: " + i + " for Reg ID: " + regId);
                return;
            }
        }
        
        System.out.println("Row not found in table for Reg ID: " + regId);
        
    } catch (Exception e) {
        System.out.println("Error highlighting row: " + e.getMessage());
        e.printStackTrace();
    }
}
    private void searchParticipant() {
    try {
        String regId = txtRegId.getText().trim();
        
        if (regId.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please enter a Registration ID to search!", 
                "Search Error", 
                JOptionPane.WARNING_MESSAGE);
            txtRegId.requestFocus();
            return;
        }
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "SELECT * FROM Participants WHERE RegistrationID = ?";
        
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, regId);
        
        ResultSet rs = pst.executeQuery();
        
        if (rs.next()) {
            // Populate form with found data
            txtName.setText(rs.getString("ParticipantName"));
            
            // Set department in combo box
            String department = rs.getString("UniversityDepartment");
            boolean departmentFound = false;
            for (int i = 0; i < comboDepartment.getItemCount(); i++) {
                if (comboDepartment.getItemAt(i).equals(department)) {
                    comboDepartment.setSelectedIndex(i);
                    departmentFound = true;
                    break;
                }
            }
            if (!departmentFound) {
                comboDepartment.setSelectedIndex(0);
            }
            
            txtDancingPartner.setText(rs.getString("DancingPartner"));
            txtContact.setText(rs.getString("ContactNumber"));
            txtEmail.setText(rs.getString("EmailAddress"));
            
            // Load image if exists
            String imagePath = rs.getString("ImagePath");
            if (imagePath != null && !imagePath.trim().isEmpty()) {
                loadImageToPanel(imagePath);
            } else {
                clearImagePanel();
            }
            
            // Filter table to show only the searched record
            filterTableByRegId(regId);
            
            JOptionPane.showMessageDialog(this, 
                "Participant found!\n\n" +
                "Name: " + rs.getString("ParticipantName") + "\n" +
                "Department: " + rs.getString("UniversityDepartment") + "\n" +
                "Contact: " + rs.getString("ContactNumber"),
                "Search Successful", 
                JOptionPane.INFORMATION_MESSAGE);
            
        } else {
            JOptionPane.showMessageDialog(this, 
                "No participant found with Registration ID: " + regId, 
                "Not Found", 
                JOptionPane.INFORMATION_MESSAGE);
            clearForm();
            // Show all records if search fails
            loadDataToTable();
        }
        
        rs.close();
        pst.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error searching participant: " + e.getMessage(), 
            "Search Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

private void filterTableByRegId(String regId) {
    try {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
        
        // Set up the filter for RegistrationID column (column 0)
        RowFilter<DefaultTableModel, Object> filter = RowFilter.regexFilter("(?i)" + regId, 0);
        sorter.setRowFilter(filter);
        
        // If filter found results, highlight the first row
        if (sorter.getViewRowCount() > 0) {
            jTable1.setRowSelectionInterval(0, 0);
        }
        
    } catch (Exception e) {
        System.out.println("Error filtering table: " + e.getMessage());
        // If filtering fails, just load all data
        loadDataToTable();
    }
}
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchParticipant();// TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       deleteParticipant(); // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed
private void loadDataToTable() {
    try {
        System.out.println("Starting to load data to table...");
        
        Connection con = DatabaseConnection.getConnection();
        String sql = "SELECT * FROM Participants ORDER BY RegistrationID";
        
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        System.out.println("Table model cleared. Starting to add rows...");
        
        int rowCount = 0;
        while (rs.next()) {
            rowCount++;
            Object[] row = {
                rs.getString("RegistrationID"),
                rs.getString("ParticipantName"),
                rs.getString("UniversityDepartment"),
                rs.getString("DancingPartner"),
                rs.getString("ContactNumber"),
                rs.getString("EmailAddress"),
                rs.getString("ImagePath")
            };
            model.addRow(row);
            System.out.println("Added row " + rowCount + ": " + row[0] + " - " + row[1]);
        }
        
        rs.close();
        pst.close();
        
        System.out.println("Total rows loaded: " + rowCount);
        //txtStatus.setText("Data loaded successfully. Total records: " + rowCount);
        
        // Force table refresh
        jTable1.revalidate();
        jTable1.repaint();
        
    } catch (Exception e) {
        System.out.println("Error in loadDataToTable: " + e.getMessage());
        JOptionPane.showMessageDialog(this, 
            "Error loading data: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

private void populateFormFromSelectedRow() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0 && selectedRow < jTable1.getRowCount()) {
        try {
           // debugTableColumns(); // Debug info
            
            // Safely get data with bounds checking
            String regId = getTableValueSafe(selectedRow, 0);
            String name = getTableValueSafe(selectedRow, 1);
            String department = getTableValueSafe(selectedRow, 2);
            String partner = getTableValueSafe(selectedRow, 3);
            String contact = getTableValueSafe(selectedRow, 4);
            String email = getTableValueSafe(selectedRow, 5);
            String imagePath = getTableValueSafe(selectedRow, 6);

            // Populate form fields
            txtRegId.setText(regId);
            txtName.setText(name);
            
            // Set department in combo box
            setComboBoxDepartment(department);
            
            txtDancingPartner.setText(partner);
            txtContact.setText(contact);
            txtEmail.setText(email);

            // Load image if path exists and is not empty
            if (imagePath != null && !imagePath.trim().isEmpty()) {
                loadImageToPanel(imagePath);
            } else {
                clearImagePanel();
            }
            
           // txtStatus.setText("Loaded: " + name);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error loading row data: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
}

// Helper method to safely get table values
private String getTableValueSafe(int row, int column) {
    if (column < jTable1.getColumnCount()) {
        Object value = jTable1.getValueAt(row, column);
        return value != null ? value.toString() : "";
    }
    return "";
}

// Helper method to set department in combo box
private void setComboBoxDepartment(String department) {
    for (int i = 0; i < comboDepartment.getItemCount(); i++) {
        if (comboDepartment.getItemAt(i).equals(department)) {
            comboDepartment.setSelectedIndex(i);
            return;
        }
    }
    // If not found, select first item
    comboDepartment.setSelectedIndex(0);
}
private void setupTableSelectionListener() {
    jTable1.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
            populateFormFromSelectedRow();
        }
    });
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new RegistrationForm().setVisible(true));
    }
private void refreshDataTable() {
    try {
        System.out.println("Refreshing data table...");
        
        // Clear any existing table filters
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable1.getRowSorter();
        if (sorter != null) {
            sorter.setRowFilter(null); // Remove any active filters
        }
        
        // Clear any table selection
        jTable1.clearSelection();
        
        // Reload data from database
        loadDataToTable();
        
        System.out.println("Data table refreshed successfully.");
        
    } catch (Exception e) {
        System.out.println("Error refreshing data table: " + e.getMessage());
        JOptionPane.showMessageDialog(this, 
            "Error refreshing table: " + e.getMessage(), 
            "Refresh Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JComboBox<String> comboDepartment;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panelImage;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtDancingPartner;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtRegId;
    // End of variables declaration//GEN-END:variables
}
